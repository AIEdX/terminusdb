#!/usr/bin/env swipl

:- initialization(main).

:- use_module(library(process)).
:- use_module(library(optparse)).
:- use_module(library(md5)).

/*
 * command(Cmd) is semidet. 
 * 
 * True if Cmd exists. 
 */
command(Cmd) :-
    catch(
        (   process_create(path(Cmd), [], [ stderr(null),
                                            stdout(null),
                                            process(PID)
                                          ]),
            process_wait(PID,_Status)),
        error(existence_error(source_sink,path(Cmd)),_),
        fail).

hostname(Hostname) :-
    (   command(hostname)
    ->  process_create(path(hostname), ['-f'], [ stderr(null),
                                                 stdout(pipe(Out)),
                                                 process(PID)
                                               ]),
        process_wait(PID,_Status),
        (   read_string(Out, '\n', '\r', _, Hostname_String)
        ->  atom_string(Hostname,Hostname_String)
        ;   Hostname = localhost)
    ;   Hostname = localhost).

opt_spec([[opt(help),
           type(boolean),
           shortflags([h]),
           longflags([help]), 
           default(false),
           help('print this help')],

          [opt(server),
           type(atom),
           shortflags([s]),
           longflags([server]),
           default(''),
           help('set the server name')],
          
          [opt(key),
           type(atom),
           shortflags([k]),
           longflags([key]),
           default(admin),
           help('key of amin user')]]).

/* 
 * help(+Cmd:atom,-Help:atom) is det.
 */
help(Cmd,Spec,Help) :-
    file_base_name(Cmd,Name),
    opt_help(Spec,Help_Text),
    format(atom(Help),'Usage: ~s [OPTIONS]

Set the administrative key - necessary before superuser can begin to set other permissions

~s', [Name,Help_Text]).

example_instance_ttl(Dir,Path) :- 
    atomic_list_concat([Dir,'/../config/terminus_instance_template.ttl'], Path).

example_inference_ttl(Dir,Path) :- 
    atomic_list_concat([Dir,'/../config/terminus_inference_template.ttl'], Path).

example_schema_ttl(Dir,Path) :- 
    atomic_list_concat([Dir,'/../terminus-ontologies/terminus.owl.ttl'], Path).

database_path(Dir,Host,Path) :-
    atomic_list_concat([Dir,'/../storage/http%3a%2f%2f',Host,'%2fterminus/'], Path).

instance_path(Dir,Host,Path) :-
    database_path(Dir,Host,DB),
    atomic_list_concat([DB,'document/1/'], Path).

inference_path(Dir,Host,Path) :-
    database_path(Dir,Host,DB),
    atomic_list_concat([DB,'inference/1/'], Path).

schema_path(Dir,Host,Path) :-
    database_path(Dir,Host,DB),
    atomic_list_concat([DB,'schema/1/'], Path).

program(Prog) :-
    current_prolog_flag(associated_file,Prog).
    
main(Args) :-

    program(Prog),
    opt_spec(Spec),
    opt_parse(Spec,Args,Opts,_),
    help(Prog,Spec,Help_Text),

    (   command(rdf2hdt)
    ->  true
    ;   format('We can\'t proceed without rdf2hdt but it\'s not installed.  Aborting.\n'),
        write(Help_Text),
	halt),
    
    (   memberchk(help(true), Opts)
    ->  write(Help_Text),
        halt
    ;   memberchk(key(admin), Opts)
    ->  format('~nThink of a better administrator key please...~n~n'),
        write(Help_Text),
        halt
    ;   memberchk(key(Key), Opts),
        file_directory_name(Prog, Dir),

        memberchk(server(Server_Arg), Opts),
        (   Server_Arg = ''
        ->  (   hostname(Server)
            ->  true
            ;   Server = localhost
            )
        ;   Server = Server_Arg),
        
        format("\nPlease copy config/config-example.pl to config/config.pl and change the hostname to 'http(s?)://~s'\n",
               [Server]),
        
        example_instance_ttl(Dir,Example_Instance_TTL),
        example_inference_ttl(Dir,Example_Inference_TTL),
        example_schema_ttl(Dir,Example_Schema_TTL),

        database_path(Dir,Server,DB_Path),
        instance_path(Dir,Server,Instance_Path),
        inference_path(Dir,Server,Inference_Path),
        schema_path(Dir,Server,Schema_Path),
        
        md5_hash(Key,Hash,[]),
        atomic_list_concat(['
mkdir -p "',Instance_Path,'";
mkdir -p "',Inference_Path,'";
mkdir -p "',Schema_Path,'";
rm -f ',Instance_Path,'* ;
rm -f ',Inference_Path,'* ;
rm -f ',Schema_Path,'* ;
touch ',DB_Path,'COLLECTION;
cp "',Example_Instance_TTL,'" "',Instance_Path,'1-ckp.ttl";
cp "',Example_Inference_TTL,'" "',Inference_Path,'1-ckp.ttl";
cp "',Example_Schema_TTL,'" "',Schema_Path,'1-ckp.ttl";
sed -i "s/SEKRET_ADMIN_KEY/',Hash,'/" "',Instance_Path,'1-ckp.ttl";
sed -i "s/localhost/',Server,'/" "',Instance_Path,'1-ckp.ttl";
sed -i "s/localhost/',Server,'/" "',Schema_Path,'1-ckp.ttl";
'],
                           Cmd),
        % format('Running Cmd:~s~n',[Cmd]),
        shell(Cmd),
        format('Successfully updated admin key!!~n'),
        halt).

    
