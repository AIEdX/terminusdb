name: Publish

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - dev
      - canary
      - rc
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  test_and_push_docker:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: terminusdb/terminusdb-server
      DOCKER_ENVS: "-e TERMINUSDB_SERVER_JWT_PUBLIC_KEY_PATH=test/public_key_test.key.pub -e TERMINUSDB_SERVER_JWT_PUBLIC_KEY_ID=testkey -e TERMINUSDB_HTTPS_ENABLED=false"


    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Run tests
        run: docker run $DOCKERENVS terminusdb/terminusdb-server:latest bash -c "/app/terminusdb/utils/db_init -k root -s localhost && swipl -g run_tests -g halt /app/terminusdb/start.pl"

      - name: Log into Docker Container Registry
        if: github.event_name != 'pull_request'
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u terminusdb --password-stdin

      - name: Push image to Docker Container Registry
        if: github.event_name != 'pull_request'
        run: |
          IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  appimage:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
            toolchain: stable

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        sudo apt-add-repository ppa:swi-prolog/stable -y
        sudo apt-get update -y
        sudo apt-get install swi-prolog-nox libpcre3 -y

    - name: Download LinuxDeploy AppImage
      run: wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage

    - name: Give Linuxdeploy exec permissions
      run: chmod +x linuxdeploy-x86_64.AppImage

    - name: Run the build script
      run: ./build_script.sh $(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

    - name: Rename AppImage
      run: mv "TerminusDB-$(echo $GITHUB_SHA | cut -c 1-7)-x86_64.AppImage" TerminusDB-amd64.AppImage

    - name: Archive production artifacts
      uses: actions/upload-artifact@v1
      with:
        name: TerminusDB-amd64.AppImage
        path: TerminusDB-amd64.AppImage
